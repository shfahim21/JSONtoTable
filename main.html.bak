<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clean JSON to Table with PDF Export</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 20px;
            background-color: #f8f9fa;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 20px rgba(0,0,0,0.08);
        }
        
        .input-section {
            margin-bottom: 30px;
        }
        
        textarea {
            width: 100%;
            height: 200px;
            padding: 15px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            resize: vertical;
            background: #fafafa;
        }
        
        .button-group {
            display: flex;
            gap: 15px;
            margin-top: 15px;
            flex-wrap: wrap;
        }
        
        button {
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: transform 0.2s;
            font-weight: 500;
        }
        
        .generate-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .pdf-btn {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }
        
        .settings-btn {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }
        
        button:hover {
            transform: translateY(-2px);
        }
        
        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .pdf-settings {
            display: none;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-top: 15px;
            border: 1px solid #e9ecef;
        }
        
        .pdf-settings.show {
            display: block;
        }
        
        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .setting-item {
            display: flex;
            flex-direction: column;
        }
        
        .setting-item label {
            font-weight: 500;
            margin-bottom: 5px;
            color: #495057;
        }
        
        .setting-item select,
        .setting-item input {
            padding: 8px 12px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            background: white;
        }
        
        .main-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0,0,0,0.07);
        }
        
        .main-table td {
            padding: 12px 16px;
            border-bottom: 1px solid #f0f0f0;
            vertical-align: top;
        }
        
        .main-table tr:last-child td {
            border-bottom: none;
        }
        
        .key-column {
            background: #f8f9fa;
            font-weight: 600;
            color: #495057;
            width: 30%;
            border-right: 2px solid #e9ecef;
        }
        
        .value-column {
            background: white;
            color: #212529;
        }
        
        .nested-table {
            width: 100%;
            border-collapse: collapse;
            margin: 8px 0;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            overflow: hidden;
        }
        
        .nested-table td {
            padding: 8px 12px;
            border-bottom: 1px solid #f8f9fa;
        }
        
        .nested-table tr:last-child td {
            border-bottom: none;
        }
        
        .nested-key {
            background: #f1f3f4;
            font-weight: 500;
            color: #5f6368;
            width: 35%;
            border-right: 1px solid #e8eaed;
        }
        
        .nested-value {
            background: white;
            color: #202124;
        }
        
        .array-item {
            display: block;
            padding: 4px 8px;
            margin: 2px 0;
            background: #f8f9fa;
            border-radius: 4px;
            border-left: 3px solid #4285f4;
        }
        
        .array-container {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }
        
        .primitive-value {
            font-family: 'SF Mono', 'Monaco', 'Cascadia Code', monospace;
            font-size: 14px;
        }
        
        .string-value {
            color: #0d7377;
        }
        
        .number-value {
            color: #d63384;
        }
        
        .boolean-value {
            color: #6f42c1;
            font-weight: 500;
        }
        
        .null-value {
            color: #6c757d;
            font-style: italic;
        }
        
        .error {
            color: #dc3545;
            background: #f8d7da;
            padding: 15px;
            border-radius: 8px;
            margin-top: 15px;
        }
        
        .success {
            color: #155724;
            background: #d4edda;
            padding: 15px;
            border-radius: 8px;
            margin-top: 15px;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .description {
            color: #6c757d;
            margin-bottom: 25px;
        }
        
        .pdf-content {
            background: white;
            padding: 20px;
            margin: 20px 0;
        }
        
        .pdf-header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid #e9ecef;
            padding-bottom: 20px;
        }
        
        .pdf-title {
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
            margin: 0;
        }
        
        .pdf-date {
            color: #6c757d;
            margin-top: 10px;
        }
        
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* PDF specific styles */
        @media print {
            body {
                margin: 0;
                background: white;
            }
            .container {
                box-shadow: none;
                border-radius: 0;
                max-width: none;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Clean JSON to Table with PDF Export</h1>
        <p class="description">Convert JSON data into clean, readable tables and export as PDF</p>
        
        <div class="input-section">
            <textarea id="jsonInput" placeholder="Paste your JSON here...">
{
  "user": {
    "name": "Alice Johnson",
    "age": 28,
    "email": "alice@email.com",
    "active": true,
    "address": {
      "street": "123 Main St",
      "city": "New York",
      "country": "USA"
    },
    "hobbies": ["reading", "photography", "hiking"],
    "projects": [
      {
        "name": "Website Redesign",
        "status": "completed",
        "budget": 15000
      },
      {
        "name": "Mobile App",
        "status": "in-progress",
        "budget": 25000
      }
    ]
  },
  "company": "Tech Corp",
  "employees": 150,
  "founded": 2018
}
            </textarea>
            
            <div class="button-group">
                <button class="generate-btn" onclick="generateTable()">Generate Clean Table</button>
                <button class="pdf-btn" id="pdfBtn" onclick="generatePDF()" disabled>
                    <span id="pdfBtnText">Export as PDF</span>
                </button>
                <button class="settings-btn" onclick="togglePDFSettings()">PDF Settings</button>
            </div>
            
            <div id="pdfSettings" class="pdf-settings">
                <h3>PDF Export Settings</h3>
                <div class="settings-grid">
                    <div class="setting-item">
                        <label for="pageSize">Page Size:</label>
                        <select id="pageSize">
                            <option value="a4">A4</option>
                            <option value="letter">Letter</option>
                            <option value="legal">Legal</option>
                            <option value="a3">A3</option>
                        </select>
                    </div>
                    <div class="setting-item">
                        <label for="orientation">Orientation:</label>
                        <select id="orientation">
                            <option value="portrait">Portrait</option>
                            <option value="landscape">Landscape</option>
                        </select>
                    </div>
                    <div class="setting-item">
                        <label for="fileName">File Name:</label>
                        <input type="text" id="fileName" value="json-table-export" placeholder="Enter file name">
                    </div>
                    <div class="setting-item">
                        <label for="quality">Image Quality:</label>
                        <select id="quality">
                            <option value="1">High</option>
                            <option value="2">Medium</option>
                            <option value="3">Low (Faster)</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
        
        <div id="output"></div>
    </div>

    <script>
        let currentJsonData = null;

        function formatPrimitiveValue(value) {
            if (value === null) {
                return '<span class="primitive-value null-value">null</span>';
            }
            if (typeof value === 'string') {
                return `<span class="primitive-value string-value">${value}</span>`;
            }
            if (typeof value === 'number') {
                return `<span class="primitive-value number-value">${value}</span>`;
            }
            if (typeof value === 'boolean') {
                return `<span class="primitive-value boolean-value">${value}</span>`;
            }
            return `<span class="primitive-value">${value}</span>`;
        }

        function createNestedTable(obj) {
            let html = '<table class="nested-table">';
            
            for (const [key, value] of Object.entries(obj)) {
                html += '<tr>';
                html += `<td class="nested-key">${key}</td>`;
                html += '<td class="nested-value">';
                
                if (value === null || typeof value !== 'object') {
                    html += formatPrimitiveValue(value);
                } else if (Array.isArray(value)) {
                    html += createArrayDisplay(value);
                } else {
                    html += createNestedTable(value);
                }
                
                html += '</td>';
                html += '</tr>';
            }
            
            html += '</table>';
            return html;
        }

        function createArrayDisplay(arr) {
            if (arr.length === 0) {
                return '<span class="primitive-value null-value">empty array</span>';
            }
            
            const allPrimitives = arr.every(item => 
                item === null || typeof item !== 'object'
            );
            
            if (allPrimitives) {
                let html = '<div class="array-container">';
                arr.forEach(item => {
                    html += `<div class="array-item">${formatPrimitiveValue(item)}</div>`;
                });
                html += '</div>';
                return html;
            }
            
            let html = '<div class="array-container">';
            arr.forEach((item, index) => {
                html += '<div class="array-item">';
                if (typeof item === 'object' && item !== null) {
                    if (Array.isArray(item)) {
                        html += createArrayDisplay(item);
                    } else {
                        html += createNestedTable(item);
                    }
                } else {
                    html += formatPrimitiveValue(item);
                }
                html += '</div>';
            });
            html += '</div>';
            return html;
        }

        function createMainTable(data) {
            let html = '<table class="main-table">';
            
            for (const [key, value] of Object.entries(data)) {
                html += '<tr>';
                html += `<td class="key-column">${key}</td>`;
                html += '<td class="value-column">';
                
                if (value === null || typeof value !== 'object') {
                    html += formatPrimitiveValue(value);
                } else if (Array.isArray(value)) {
                    html += createArrayDisplay(value);
                } else {
                    html += createNestedTable(value);
                }
                
                html += '</td>';
                html += '</tr>';
            }
            
            html += '</table>';
            return html;
        }

        function generateTable() {
            const input = document.getElementById('jsonInput').value.trim();
            const output = document.getElementById('output');
            const pdfBtn = document.getElementById('pdfBtn');
            
            if (!input) {
                output.innerHTML = '<div class="error">Please enter JSON data</div>';
                pdfBtn.disabled = true;
                return;
            }
            
            try {
                const jsonData = JSON.parse(input);
                currentJsonData = jsonData;
                
                let html = '<div id="tableContent">';
                
                if (Array.isArray(jsonData)) {
                    html += '<div class="value-column">' + createArrayDisplay(jsonData) + '</div>';
                } else if (typeof jsonData === 'object' && jsonData !== null) {
                    html += createMainTable(jsonData);
                } else {
                    html += `<table class="main-table">
                        <tr>
                            <td class="key-column">Value</td>
                            <td class="value-column">${formatPrimitiveValue(jsonData)}</td>
                        </tr>
                    </table>`;
                }
                
                html += '</div>';
                output.innerHTML = html;
                
                // Enable PDF button
                pdfBtn.disabled = false;
                
            } catch (error) {
                output.innerHTML = `<div class="error">Invalid JSON: ${error.message}</div>`;
                pdfBtn.disabled = true;
            }
        }

        function togglePDFSettings() {
            const settings = document.getElementById('pdfSettings');
            settings.classList.toggle('show');
        }

        async function generatePDF() {
            const pdfBtn = document.getElementById('pdfBtn');
            const pdfBtnText = document.getElementById('pdfBtnText');
            
            if (!currentJsonData) {
                alert('Please generate a table first!');
                return;
            }
            
            // Show loading state
            pdfBtn.disabled = true;
            pdfBtnText.innerHTML = '<span class="loading"></span> Generating PDF...';
            
            try {
                // Get settings
                const pageSize = document.getElementById('pageSize').value;
                const orientation = document.getElementById('orientation').value;
                const fileName = document.getElementById('fileName').value || 'json-table-export';
                const quality = parseInt(document.getElementById('quality').value);
                
                // Create a clean PDF container
                const pdfContainer = document.createElement('div');
                pdfContainer.className = 'pdf-container';
                pdfContainer.style.position = 'absolute';
                pdfContainer.style.left = '-9999px';
                pdfContainer.style.background = 'white';
                pdfContainer.style.padding = '20px';
                
                // Add header
                const header = document.createElement('div');
                header.className = 'pdf-header';
                header.style.textAlign = 'center';
                header.style.marginBottom = '20px';
                header.style.borderBottom = '1px solid #000';
                header.style.paddingBottom = '10px';
                header.innerHTML = `
                    <h1 style="margin: 0; font-size: 18px;">JSON Data Export</h1>
                    <div style="margin-top: 5px; font-size: 12px;">Generated on ${new Date().toLocaleString()}</div>
                `;
                
                // Create clean minimal table for PDF
                const tableContainer = document.createElement('div');
                tableContainer.innerHTML = createMinimalPDFTable(currentJsonData);
                
                // Add elements to container
                pdfContainer.appendChild(header);
                pdfContainer.appendChild(tableContainer);
                
                // Temporarily add to body for rendering
                document.body.appendChild(pdfContainer);
                
                // Generate canvas
                const canvas = await html2canvas(pdfContainer, {
                    scale: quality,
                    useCORS: true,
                    backgroundColor: '#ffffff'
                });
                
                // Remove temporary element
                document.body.removeChild(pdfContainer);
                
                // Create PDF
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF({
                    orientation: orientation,
                    unit: 'mm',
                    format: pageSize
                });
                
                // Get page dimensions
                const pageWidth = pdf.internal.pageSize.getWidth();
                const pageHeight = pdf.internal.pageSize.getHeight();
                const margin = 10;
                
                // Calculate image dimensions
                const imgWidth = pageWidth - (margin * 2);
                const imgHeight = (canvas.height * imgWidth) / canvas.width;
                
                // Add image to PDF
                const imgData = canvas.toDataURL('image/png');
                
                if (imgHeight <= pageHeight - (margin * 2)) {
                    // Single page
                    pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);
                } else {
                    // Multiple pages handling with proper positioning
                    let heightLeft = imgHeight;
                    let position = 0;
                    let page = 1;
                    
                    pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);
                    heightLeft -= pageHeight - (margin * 2);
                    
                    while (heightLeft > 0) {
                        position = heightLeft - imgHeight;
                        pdf.addPage();
                        pdf.addImage(imgData, 'PNG', margin, position + margin, imgWidth, imgHeight);
                        heightLeft -= (pageHeight - (margin * 2));
                        page++;
                    }
                }
                
                // Save PDF
                pdf.save(`${fileName}.pdf`);
                
                // Show success message
                const output = document.getElementById('output');
                const successMsg = document.createElement('div');
                successMsg.className = 'success';
                successMsg.textContent = `PDF "${fileName}.pdf" has been generated successfully!`;
                output.appendChild(successMsg);
                
                // Remove success message after 3 seconds
                setTimeout(() => {
                    if (successMsg.parentNode) {
                        successMsg.parentNode.removeChild(successMsg);
                    }
                }, 3000);
                
            } catch (error) {
                console.error('PDF generation error:', error);
                alert('Error generating PDF: ' + error.message);
            } finally {
                // Reset button state
                pdfBtn.disabled = false;
                pdfBtnText.textContent = 'Export as PDF';
            }
        }
        
        // Function to create minimal tables for PDF export
        function createMinimalPDFTable(data) {
            if (data === null || data === undefined) {
                return '<div>No data</div>';
            }
            
            // For primitive values
            if (typeof data !== 'object') {
                return `<table style="width:100%; border-collapse:collapse; border:1px solid #000;">
                    <tr>
                        <td style="border:1px solid #000; padding:8px; width:30%;">Value</td>
                        <td style="border:1px solid #000; padding:8px;">${data}</td>
                    </tr>
                </table>`;
            }
            
            // For arrays
            if (Array.isArray(data)) {
                let html = '<table style="width:100%; border-collapse:collapse; border:1px solid #000;">';
                html += '<tr><th style="border:1px solid #000; padding:8px;">Index</th><th style="border:1px solid #000; padding:8px;">Value</th></tr>';
                
                data.forEach((item, index) => {
                    html += '<tr>';
                    html += `<td style="border:1px solid #000; padding:8px;">${index}</td>`;
                    html += '<td style="border:1px solid #000; padding:8px;">';
                    
                    if (item === null) {
                        html += 'null';
                    } else if (typeof item !== 'object') {
                        html += item;
                    } else {
                        html += createMinimalPDFTable(item);
                    }
                    
                    html += '</td>';
                    html += '</tr>';
                });
                
                html += '</table>';
                return html;
            }
            
            // For objects
            let html = '<table style="width:100%; border-collapse:collapse; border:1px solid #000;">';
            
            for (const [key, value] of Object.entries(data)) {
                html += '<tr>';
                html += `<td style="border:1px solid #000; padding:8px; width:30%; font-weight:bold;">${key}</td>`;
                html += '<td style="border:1px solid #000; padding:8px;">';
                
                if (value === null) {
                    html += 'null';
                } else if (typeof value !== 'object') {
                    html += value;
                } else {
                    html += createMinimalPDFTable(value);
                }
                
                html += '</td>';
                html += '</tr>';
            }
            
            html += '</table>';
            return html;
        }

        // Generate table on page load
        window.onload = function() {
            generateTable();
        };
    </script>
</body>
</html>